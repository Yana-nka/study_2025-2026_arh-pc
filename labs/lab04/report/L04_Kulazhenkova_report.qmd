---
## Author
author:
  name: Кулаженкова Яна Сергеевна
  orcid: 1032253497
  email: 1032253497@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: "Отчёт по лабораторной работе №4"
subtitle: "НКАбд-03-25"
license: "CC BY"
---

# Цель работы

Освоение процедуры компиляции и сборки программ, написанных на языке ассемблера NASM, включая этапы трансляции, компоновки и запуска исполняемого файла.

# Задание

Лабораторная работа направлена на освоение полного цикла создания программ на языке ассемблера NASM, начиная
 с изучения теоретических основ архитектуры ЭВМ и системы регистров процессора, практического написания простейшей
 программы "Hello world!" с использованием системных вызовов Linux, и заканчивая процессами трансляции исходного кода в
 объектный файл с помощью компилятора NASM, компоновки исполняемого файла линкером LD и его последующего запуска.

# Теоретическое введение

Язык ассемблера — это машинно-ориентированный язык низкого уровня, максимально приближенный к архитектуре ЭВМ
 и предоставляющий программисту прямой доступ к аппаратным возможностям, таким как регистры процессора.
 Например, в [табл. @register] приведены примеры основных регистров общего назначения.
 Программы на ассемблере транслируются в машинный код (последовательности нулей и единиц) с помощью специальной
 программы-транслятора — ассемблера. В рамках данной работы используется ассемблер NASM (Netwide Assembler), который
 поддерживает Intel-синтаксис и инструкции x86-64. Типичная команда NASM имеет формат:
 [метка:] мнемокод [операнд] [; комментарий]. Помимо инструкций процессора, программы могут содержать директивы —
 инструкции для управления работой транслятора, например, для определения данных.

Процесс создания исполняемой программы на ассемблере включает несколько этапов: написание исходного кода и сохранение
 его в файл с расширением .asm; трансляция исходного текста в объектный код (файл с расширением .o) с помощью ассемблера
 NASM; компоновка (линковка) объектных файлов в исполняемый файл с помощью компоновщика LD; запуск и, при необходимости,
 отладка полученной программы.

| Размер   | Регистры                          |
|----------|-----------------------------------|
| 64 бита  | RAX, RCX, RDX, RBX, RSI, RDI      |
| 32 бита  | EAX, ECX, EDX, EBX, ESI, EDI      |
| 16 бит   | AX, CX, DX, BX, SI, DI            |
| 8 бит    | AH, AL, CH, CL, DH, DL, BH, BL    |

: Примеры регистров. {#register}

# Выполнение лабораторной работы
## Программа Hello world!

Создадим директорию для работы с программами на ассемблере и перейдём в неё. Далее создадим файл hello.asm и напишем в нём свою первую программу на
 ассемблере ([рис. @fig-001]).

![Начало работы с файлом hello.asm](image/start_asmb_01.png){#fig-001 width=80%}

Скомпилируем программу с помощью NASM. Затем создадим исполняемый файл с помощью компоновщика ([рис. @fig-002]).

![Подготовка файла hello.asm](image/extended_request_02.png){#fig-002 width=80%}

Перед запуском исполняемого файла объектный файл необходимо передать на обработку компоновщику ([рис. @fig-003]).

![Передача файла компоновщику](image/dl_03.png){#fig-003 width=80%}

Запустим свою первую программу на ассемблере ([рис. @fig-004]).

![Запуск исполняемого файла](image/processing_04.png){#fig-004 width=80%}

# Задания для самостоятельной работы

Создадим модифицированную версию файла с кодом. Для этого получим копию файла hello.asm с именем lab4.asm. Затем заменим в файле lab4.asm
 строку "Hello world!" на свои фамилию и имя ([рис. @fig-005]).

![Замена файла hello.asm на файл lab4.asm](image/newtext_06.png){#fig-005 width=80%}

Теперь мы можем скомпилировать и запустить данный файл ([рис. @fig-006]).

![Запуск файла lab4](image/ex3_07.png){#fig-006 width=80%}

Перед завершением работы скопируем все исходные файлы в репозиторий и загрузим на GitHub для сохранения результатов ([рис. @fig-007]).

![Загрузка файлов на Github](image/gitfile_08.png){#fig-007 width=80%}

# Выводы

Мы освоили работу с компилятором NASM для преобразования исходного кода в объектные файлы и с линкером LD для создания исполняемых программ. На практике мы убедились, как текст программы на ассемблере превращается в работающее приложение. Все этапы - от написания кода до запуска программы - были успешно выполнены. Таким образом, мы достигли цели работы и освоили процесс сборки программ на NASM.
